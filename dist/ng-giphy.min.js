!function(){"use strict";function n(){return{scope:{q:"=",rating:"="},controller:t,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function t(n){var t=this,i=t.q||"cat";n.random(i).then(function(n){t.giphysrc=n})}function i(){return{scope:{id:"=",rating:"="},controller:r,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function r(n){var t=this,i=t.id||"YyKPbc5OOTSQE";n.random(i).then(function(n){t.giphysrc=n})}function e(n){function t(t){var i=t.split(" ");return t=i.join("+"),n.get(r+"&q="+t).then(function(n){return n.data.data[0].images.original.url})}function i(t){return n.get(e.replace("%s",t)).then(function(n){return console.log(n.data),n.data.url})}var r="http://api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC",e="http://api.giphy.com/v1/gifs/%s?api_key=dc6zaTOxFJmzC";return{random:t,byId:i}}angular.module("ng-giphy",[]).directive("giphyRand",n).directive("giphyGif",i).factory("giphy",e),t.$inject=["giphy"],r.$inject=["giphy"],e.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWdpcGh5LmpzIl0sIm5hbWVzIjpbImdpcGh5UmFuZCIsInNjb3BlIiwicSIsInJhdGluZyIsImNvbnRyb2xsZXIiLCJnaXBoeUNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwidGVtcGxhdGUiLCJnaXBoeSIsInZtIiwidGhpcyIsInJhbmRvbSIsInRoZW4iLCJyZXMiLCJnaXBoeXNyYyIsImdpcGh5R2lmIiwiaWQiLCJnaXBoeUdpZkNvbnRyb2xsZXIiLCJnaXBoeVNlcnZpY2UiLCIkaHR0cCIsIndvcmRzIiwic3BsaXQiLCJqb2luIiwiZ2V0Iiwic2VhcmNoVXJsIiwiZGF0YSIsImltYWdlcyIsIm9yaWdpbmFsIiwidXJsIiwiYnlJZCIsImJ5SWRVcmwiLCJyZXBsYWNlIiwiY29uc29sZSIsImxvZyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCJmYWN0b3J5IiwiJGluamVjdCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQVVBLFNBQUFBLEtBQ0EsT0FDQUMsT0FDQUMsRUFBQSxJQUNBQyxPQUFBLEtBRUFDLFdBQUFDLEVBQ0FDLGFBQUEsS0FDQUMsa0JBQUEsRUFDQUMsU0FBQSxvQ0FLQSxRQUFBSCxHQUFBSSxHQUNBLEdBQUFDLEdBQUFDLEtBRUFULEVBQUFRLEVBQUFSLEdBQUEsS0FDQU8sR0FBQUcsT0FBQVYsR0FBQVcsS0FBQSxTQUFBQyxHQUNBSixFQUFBSyxTQUFBRCxJQVFBLFFBQUFFLEtBQ0EsT0FDQWYsT0FDQWdCLEdBQUEsSUFDQWQsT0FBQSxLQUVBQyxXQUFBYyxFQUNBWixhQUFBLEtBQ0FDLGtCQUFBLEVBQ0FDLFNBQUEsb0NBS0EsUUFBQVUsR0FBQVQsR0FDQSxHQUFBQyxHQUFBQyxLQUVBTSxFQUFBUCxFQUFBTyxJQUFBLGVBQ0FSLEdBQUFHLE9BQUFLLEdBQUFKLEtBQUEsU0FBQUMsR0FDQUosRUFBQUssU0FBQUQsSUFRQSxRQUFBSyxHQUFBQyxHQWVBLFFBQUFSLEdBQUFWLEdBQ0EsR0FBQW1CLEdBQUFuQixFQUFBb0IsTUFBQSxJQUVBLE9BREFwQixHQUFBbUIsRUFBQUUsS0FBQSxLQUNBSCxFQUFBSSxJQUFBQyxFQUFBLE1BQUF2QixHQUFBVyxLQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQVksS0FBQUEsS0FBQSxHQUFBQyxPQUFBQyxTQUFBQyxNQVVBLFFBQUFDLEdBQUFiLEdBQ0EsTUFBQUcsR0FBQUksSUFBQU8sRUFBQUMsUUFBQSxLQUFBZixJQUFBSixLQUFBLFNBQUFDLEdBRUEsTUFEQW1CLFNBQUFDLElBQUFwQixFQUFBWSxNQUNBWixFQUFBWSxLQUFBRyxNQS9CQSxHQUFBSixHQUFBLDREQUNBTSxFQUFBLHVEQUVBLFFBQ0FuQixPQUFBQSxFQUNBa0IsS0FBQUEsR0FwRUFLLFFBQUFDLE9BQUEsZUFDQUMsVUFBQSxZQUFBckMsR0FDQXFDLFVBQUEsV0FBQXJCLEdBQ0FzQixRQUFBLFFBQUFuQixHQWtCQWQsRUFBQWtDLFNBQUEsU0EyQkFyQixFQUFBcUIsU0FBQSxTQWFBcEIsRUFBQW9CLFNBQUEiLCJmaWxlIjoibmctZ2lwaHkubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCduZy1naXBoeScsIFtdKVxuICAgIC5kaXJlY3RpdmUoJ2dpcGh5UmFuZCcsIGdpcGh5UmFuZClcbiAgICAuZGlyZWN0aXZlKCdnaXBoeUdpZicsIGdpcGh5R2lmKVxuICAgIC5mYWN0b3J5KCdnaXBoeScsIGdpcGh5U2VydmljZSk7XG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZTogcmFuZG9tIGdpZlxuICAgKi9cbiAgZnVuY3Rpb24gZ2lwaHlSYW5kKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBxICAgICA6ICc9JyxcbiAgICAgICAgcmF0aW5nOiAnPSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBnaXBoeUNvbnRyb2xsZXIsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6ICc8aW1nIG5nLXNyYz1cInt7IHZtLmdpcGh5c3JjIH19XCI+J1xuICAgIH07XG4gIH1cblxuICBnaXBoeUNvbnRyb2xsZXIuJGluamVjdCA9IFsnZ2lwaHknXTtcbiAgZnVuY3Rpb24gZ2lwaHlDb250cm9sbGVyKGdpcGh5KSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIHZhciBxID0gdm0ucSB8fCAnY2F0JztcbiAgICBnaXBoeS5yYW5kb20ocSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB2bS5naXBoeXNyYyA9IHJlcztcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZTogU3BlY2lmaWMgZ2lmIGJ5IGlkXG4gICAqL1xuICBmdW5jdGlvbiBnaXBoeUdpZigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgaWQgICAgOiAnPScsXG4gICAgICAgIHJhdGluZzogJz0nXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogZ2lwaHlHaWZDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlOiAnPGltZyBuZy1zcmM9XCJ7eyB2bS5naXBoeXNyYyB9fVwiPidcbiAgICB9O1xuICB9XG5cbiAgZ2lwaHlHaWZDb250cm9sbGVyLiRpbmplY3QgPSBbJ2dpcGh5J107XG4gIGZ1bmN0aW9uIGdpcGh5R2lmQ29udHJvbGxlcihnaXBoeSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICB2YXIgaWQgPSB2bS5pZCB8fCAnWXlLUGJjNU9PVFNRRSc7XG4gICAgZ2lwaHkucmFuZG9tKGlkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHZtLmdpcGh5c3JjID0gcmVzO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcnZpY2VzIHRvIGludGVyYWN0IHdpdGggdGhlIGdpcGh5IEFQSSBlbmRwb2ludHNcbiAgICovXG4gIGdpcGh5U2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xuICBmdW5jdGlvbiBnaXBoeVNlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgc2VhcmNoVXJsID0gJ2h0dHA6Ly9hcGkuZ2lwaHkuY29tL3YxL2dpZnMvc2VhcmNoP2FwaV9rZXk9ZGM2emFUT3hGSm16Qyc7XG4gICAgdmFyIGJ5SWRVcmwgPSAnaHR0cDovL2FwaS5naXBoeS5jb20vdjEvZ2lmcy8lcz9hcGlfa2V5PWRjNnphVE94RkptekMnXG5cbiAgICByZXR1cm4ge1xuICAgICAgcmFuZG9tOiByYW5kb20sXG4gICAgICBieUlkOiBieUlkXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZ2lmIHVybFxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gZ2lmIHVybFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShxKXtcbiAgICAgIHZhciB3b3JkcyA9IHEuc3BsaXQoJyAnKTtcbiAgICAgIHEgPSB3b3Jkcy5qb2luKCcrJylcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoc2VhcmNoVXJsICsgJyZxPScgKyBxKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5kYXRhLmRhdGFbMF0uaW1hZ2VzLm9yaWdpbmFsLnVybDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgIC8qKlxuICAgICogUmV0dXJucyBhIGdpcGh5IHVybCBieSBxdWVyeSBpdHMgSUQuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGdpZiBpZFxuICAgICogQHJldHVybiB7c3RyaW5nfSBnaWYgdXJsXG4gICAgKi9cbiAgICBmdW5jdGlvbiBieUlkKGlkKXtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoIGJ5SWRVcmwucmVwbGFjZSgnJXMnLCBpZCkgKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xuICAgICAgICByZXR1cm4gcmVzLmRhdGEudXJsO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
