!function(){"use strict";function t(){return{scope:{q:"=",rating:"="},controller:n,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function n(t){var n=this,i=n.q||"cat";t.search(i).then(function(t){n.giphysrc=t})}function i(){return{scope:{id:"=",rating:"="},controller:r,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function r(t){var n=this,i=n.id||"YyKPbc5OOTSQE";t.byId(i).then(function(t){n.giphysrc=t})}function e(){return{scope:{q:"=",rating:"="},controller:c,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function c(t){var n=this,i=n.q||"YyKPbc5OOTSQE";t.random(i).then(function(t){n.giphysrc=t})}function a(t){function n(n){var i=n.split(" ");return n=i.join("+"),t.get(e.search+"&q="+n).then(function(t){return t.data.data[0].images.original.url})}function i(n){return t.get(e.byId.replace("%s",n)).then(function(t){return t.data.data.images.original.url})}function r(n){var i=n.split(" ");return n=i.join("+"),t.get(e.random+"&tag="+n).then(function(t){return console.log(t.data,e.random+"&tag="+n),t.data.data.image_url})}var e={random:"http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC",search:"http://api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC",byId:"http://api.giphy.com/v1/gifs/%s?api_key=dc6zaTOxFJmzC"};return{search:n,random:r,byId:i}}angular.module("ng-giphy",[]).directive("giphySearch",t).directive("giphyGif",i).directive("giphyRand",e).factory("giphy",a),n.$inject=["giphy"],r.$inject=["giphy"],c.$inject=["giphy"],a.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWdpcGh5LmpzIl0sIm5hbWVzIjpbImdpcGh5U2VhcmNoIiwic2NvcGUiLCJxIiwicmF0aW5nIiwiY29udHJvbGxlciIsImdpcGh5Q29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJ0ZW1wbGF0ZSIsImdpcGh5Iiwidm0iLCJ0aGlzIiwic2VhcmNoIiwidGhlbiIsInJlcyIsImdpcGh5c3JjIiwiZ2lwaHlHaWYiLCJpZCIsImdpcGh5R2lmQ29udHJvbGxlciIsImJ5SWQiLCJnaXBoeVJhbmQiLCJnaXBoeVJhbmRDb250cm9sbGVyIiwicmFuZG9tIiwiZ2lwaHlTZXJ2aWNlIiwiJGh0dHAiLCJ3b3JkcyIsInNwbGl0Iiwiam9pbiIsImdldCIsInVybCIsImRhdGEiLCJpbWFnZXMiLCJvcmlnaW5hbCIsInJlcGxhY2UiLCJjb25zb2xlIiwibG9nIiwiaW1hZ2VfdXJsIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsImZhY3RvcnkiLCIkaW5qZWN0Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBV0EsU0FBQUEsS0FDQSxPQUNBQyxPQUNBQyxFQUFBLElBQ0FDLE9BQUEsS0FFQUMsV0FBQUMsRUFDQUMsYUFBQSxLQUNBQyxrQkFBQSxFQUNBQyxTQUFBLG9DQUtBLFFBQUFILEdBQUFJLEdBQ0EsR0FBQUMsR0FBQUMsS0FFQVQsRUFBQVEsRUFBQVIsR0FBQSxLQUNBTyxHQUFBRyxPQUFBVixHQUFBVyxLQUFBLFNBQUFDLEdBQ0FKLEVBQUFLLFNBQUFELElBUUEsUUFBQUUsS0FDQSxPQUNBZixPQUNBZ0IsR0FBQSxJQUNBZCxPQUFBLEtBRUFDLFdBQUFjLEVBQ0FaLGFBQUEsS0FDQUMsa0JBQUEsRUFDQUMsU0FBQSxvQ0FLQSxRQUFBVSxHQUFBVCxHQUNBLEdBQUFDLEdBQUFDLEtBRUFNLEVBQUFQLEVBQUFPLElBQUEsZUFDQVIsR0FBQVUsS0FBQUYsR0FBQUosS0FBQSxTQUFBQyxHQUNBSixFQUFBSyxTQUFBRCxJQU9BLFFBQUFNLEtBQ0EsT0FDQW5CLE9BQ0FDLEVBQUEsSUFDQUMsT0FBQSxLQUVBQyxXQUFBaUIsRUFDQWYsYUFBQSxLQUNBQyxrQkFBQSxFQUNBQyxTQUFBLG9DQUtBLFFBQUFhLEdBQUFaLEdBQ0EsR0FBQUMsR0FBQUMsS0FFQVQsRUFBQVEsRUFBQVIsR0FBQSxlQUNBTyxHQUFBYSxPQUFBcEIsR0FBQVcsS0FBQSxTQUFBQyxHQUNBSixFQUFBSyxTQUFBRCxJQVFBLFFBQUFTLEdBQUFDLEdBc0JBLFFBQUFaLEdBQUFWLEdBQ0EsR0FBQXVCLEdBQUF2QixFQUFBd0IsTUFBQSxJQUVBLE9BREF4QixHQUFBdUIsRUFBQUUsS0FBQSxLQUNBSCxFQUFBSSxJQUFBQyxFQUFBakIsT0FBQSxNQUFBVixHQUFBVyxLQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQWdCLEtBQUFBLEtBQUEsR0FBQUMsT0FBQUMsU0FBQUgsTUFVQSxRQUFBVixHQUFBRixHQUNBLE1BQUFPLEdBQUFJLElBQUFDLEVBQUFWLEtBQUFjLFFBQUEsS0FBQWhCLElBQUFKLEtBQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUFBZ0IsS0FBQUEsS0FBQUMsT0FBQUMsU0FBQUgsTUFVQSxRQUFBUCxHQUFBcEIsR0FDQSxHQUFBdUIsR0FBQXZCLEVBQUF3QixNQUFBLElBRUEsT0FEQXhCLEdBQUF1QixFQUFBRSxLQUFBLEtBQ0FILEVBQUFJLElBQUFDLEVBQUFQLE9BQUEsUUFBQXBCLEdBQUFXLEtBQUEsU0FBQUMsR0FFQSxNQURBb0IsU0FBQUMsSUFBQXJCLEVBQUFnQixLQUFBRCxFQUFBUCxPQUFBLFFBQUFwQixHQUNBWSxFQUFBZ0IsS0FBQUEsS0FBQU0sWUFwREEsR0FBQVAsSUFDQVAsT0FBQSw0REFDQVYsT0FBQSw0REFDQU8sS0FBQSx3REFNQSxRQUNBUCxPQUFBQSxFQUNBVSxPQUFBQSxFQUNBSCxLQUFBQSxHQXRHQWtCLFFBQUFDLE9BQUEsZUFDQUMsVUFBQSxjQUFBdkMsR0FDQXVDLFVBQUEsV0FBQXZCLEdBQ0F1QixVQUFBLFlBQUFuQixHQUNBb0IsUUFBQSxRQUFBakIsR0FrQkFsQixFQUFBb0MsU0FBQSxTQTJCQXZCLEVBQUF1QixTQUFBLFNBMEJBcEIsRUFBQW9CLFNBQUEsU0FhQWxCLEVBQUFrQixTQUFBIiwiZmlsZSI6Im5nLWdpcGh5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnbmctZ2lwaHknLCBbXSlcbiAgICAuZGlyZWN0aXZlKCdnaXBoeVNlYXJjaCcsIGdpcGh5U2VhcmNoKVxuICAgIC5kaXJlY3RpdmUoJ2dpcGh5R2lmJywgZ2lwaHlHaWYpXG4gICAgLmRpcmVjdGl2ZSgnZ2lwaHlSYW5kJywgZ2lwaHlSYW5kKVxuICAgIC5mYWN0b3J5KCdnaXBoeScsIGdpcGh5U2VydmljZSk7XG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZTogc2VhcmNoIGdpZlxuICAgKi9cbiAgZnVuY3Rpb24gZ2lwaHlTZWFyY2goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHEgICAgIDogJz0nLFxuICAgICAgICByYXRpbmc6ICc9J1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXI6IGdpcGh5Q29udHJvbGxlcixcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICB0ZW1wbGF0ZTogJzxpbWcgbmctc3JjPVwie3sgdm0uZ2lwaHlzcmMgfX1cIj4nXG4gICAgfTtcbiAgfVxuXG4gIGdpcGh5Q29udHJvbGxlci4kaW5qZWN0ID0gWydnaXBoeSddO1xuICBmdW5jdGlvbiBnaXBoeUNvbnRyb2xsZXIoZ2lwaHkpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgdmFyIHEgPSB2bS5xIHx8ICdjYXQnO1xuICAgIGdpcGh5LnNlYXJjaChxKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHZtLmdpcGh5c3JjID0gcmVzO1xuICAgIH0pO1xuICB9XG5cblxuICAvKipcbiAgICogRGlyZWN0aXZlOiBTcGVjaWZpYyBnaWYgYnkgaWRcbiAgICovXG4gIGZ1bmN0aW9uIGdpcGh5R2lmKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBpZCAgICA6ICc9JyxcbiAgICAgICAgcmF0aW5nOiAnPSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyOiBnaXBoeUdpZkNvbnRyb2xsZXIsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6ICc8aW1nIG5nLXNyYz1cInt7IHZtLmdpcGh5c3JjIH19XCI+J1xuICAgIH07XG4gIH1cblxuICBnaXBoeUdpZkNvbnRyb2xsZXIuJGluamVjdCA9IFsnZ2lwaHknXTtcbiAgZnVuY3Rpb24gZ2lwaHlHaWZDb250cm9sbGVyKGdpcGh5KSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIHZhciBpZCA9IHZtLmlkIHx8ICdZeUtQYmM1T09UU1FFJztcbiAgICBnaXBoeS5ieUlkKGlkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHZtLmdpcGh5c3JjID0gcmVzO1xuICAgIH0pO1xuICB9XG4gIFxuICAvKipcbiAgICogRGlyZWN0aXZlOiBSYW5kb20gZ2lmIGJ5IHRhZ3NcbiAgICovXG4gIGZ1bmN0aW9uIGdpcGh5UmFuZCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgcSAgICAgOiAnPScsXG4gICAgICAgIHJhdGluZzogJz0nXG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogZ2lwaHlSYW5kQ29udHJvbGxlcixcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICB0ZW1wbGF0ZTogJzxpbWcgbmctc3JjPVwie3sgdm0uZ2lwaHlzcmMgfX1cIj4nXG4gICAgfTtcbiAgfVxuXG4gIGdpcGh5UmFuZENvbnRyb2xsZXIuJGluamVjdCA9IFsnZ2lwaHknXTtcbiAgZnVuY3Rpb24gZ2lwaHlSYW5kQ29udHJvbGxlcihnaXBoeSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICB2YXIgcSA9IHZtLnEgfHwgJ1l5S1BiYzVPT1RTUUUnO1xuICAgIGdpcGh5LnJhbmRvbShxKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHZtLmdpcGh5c3JjID0gcmVzO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcnZpY2VzIHRvIGludGVyYWN0IHdpdGggdGhlIGdpcGh5IEFQSSBlbmRwb2ludHNcbiAgICovXG4gIGdpcGh5U2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xuICBmdW5jdGlvbiBnaXBoeVNlcnZpY2UoJGh0dHApIHtcbiAgICB2YXIgdXJsID17XG4gICAgICByYW5kb206ICdodHRwOi8vYXBpLmdpcGh5LmNvbS92MS9naWZzL3JhbmRvbT9hcGlfa2V5PWRjNnphVE94RkptekMnLFxuICAgICAgc2VhcmNoOiAnaHR0cDovL2FwaS5naXBoeS5jb20vdjEvZ2lmcy9zZWFyY2g/YXBpX2tleT1kYzZ6YVRPeEZKbXpDJyxcbiAgICAgIGJ5SWQ6ICdodHRwOi8vYXBpLmdpcGh5LmNvbS92MS9naWZzLyVzP2FwaV9rZXk9ZGM2emFUT3hGSm16QydcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhwb3NlIHRoZSBzZXJ2aWNlIEFQSVxuICAgICAqL1xuICAgIHJldHVybiB7XG4gICAgICBzZWFyY2g6IHNlYXJjaCxcbiAgICAgIHJhbmRvbTogcmFuZG9tLFxuICAgICAgYnlJZDogYnlJZFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc2VhcmNoIGdpZiB1cmxcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGdpZiB1cmxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZWFyY2gocSl7XG4gICAgICB2YXIgd29yZHMgPSBxLnNwbGl0KCcgJyk7XG4gICAgICBxID0gd29yZHMuam9pbignKycpXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybC5zZWFyY2ggKyAnJnE9JyArIHEpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXR1cm4gcmVzLmRhdGEuZGF0YVswXS5pbWFnZXMub3JpZ2luYWwudXJsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgLyoqXG4gICAgKiBSZXR1cm5zIGEgZ2lwaHkgdXJsIGJ5IHF1ZXJ5IGl0cyBJRC5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gZ2lmIGlkXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9IGdpZiB1cmxcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5SWQoaWQpe1xuICAgICAgcmV0dXJuICRodHRwLmdldCggdXJsLmJ5SWQucmVwbGFjZSgnJXMnLCBpZCkgKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5kYXRhLmRhdGEuaW1hZ2VzLm9yaWdpbmFsLnVybDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGdpZiB1cmwgYnkgdGFnc1xuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gZ2lmIHVybFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShxKXtcbiAgICAgIHZhciB3b3JkcyA9IHEuc3BsaXQoJyAnKTtcbiAgICAgIHEgPSB3b3Jkcy5qb2luKCcrJylcbiAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsLnJhbmRvbSArICcmdGFnPScgKyBxKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEsIHVybC5yYW5kb20gKyAnJnRhZz0nICsgcSk7XG4gICAgICAgIHJldHVybiByZXMuZGF0YS5kYXRhLmltYWdlX3VybDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
