!function(){"use strict";function n(n){n.setKey("dc6zaTOxFJmzC")}function t(){return{scope:{q:"=",rating:"="},controller:i,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function i(n){var t=this,i=t.q||"cat";n.search(i).then(function(n){t.giphysrc=n})}function r(){return{scope:{id:"=",rating:"="},controller:e,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function e(n){var t=this,i=t.id||"YyKPbc5OOTSQE";n.byId(i).then(function(n){t.giphysrc=n})}function c(){return{scope:{q:"=",rating:"="},controller:o,controllerAs:"vm",bindToController:!0,template:'<img ng-src="{{ vm.giphysrc }}">'}}function o(n){var t=this,i=t.q||"YyKPbc5OOTSQE";n.random(i).then(function(n){t.giphysrc=n})}function a(n,t){function i(t){var i=t.split(" ");return t=i.join("+"),n.get(c.search+"&q="+t).then(function(n){return n.data.data[0].images.original.url})}function r(t){return n.get(c.byId.replace("%s",t)).then(function(n){return n.data.data.images.original.url})}function e(t){var i=t.split(" ");return t=i.join("+"),n.get(c.random+"&tag="+t).then(function(n){return n.data.data.image_url})}var c={random:"http://api.giphy.com/v1/gifs/random?api_key="+t.key,search:"http://api.giphy.com/v1/gifs/search?api_key="+t.key,byId:"http://api.giphy.com/v1/gifs/%s?api_key="+t.key};return{search:i,random:e,byId:r}}function g(){var n="dc6zaTOxFJmzC";return{setKey:function(t){n=t},$get:function(){return{key:n}}}}angular.module("ng-giphy",[]).directive("giphySearch",t).directive("giphyGif",r).directive("giphyRand",c).factory("giphy",a).provider("giphyApiKey",g).config(n),n.$inject=["giphyApiKeyProvider"],i.$inject=["giphy"],e.$inject=["giphy"],o.$inject=["giphy"],a.$inject=["$http","giphyApiKey"]}();
//# sourceMappingURL=data:application/json;base64,
