{"version":3,"sources":["ng-giphy.js"],"names":["ngGiphyConfig","giphyConfigProvider","setKey","findGiphy","scope","q","rating","controller","findGiphyController","controllerAs","bindToController","templateUrl","giphy","vm","this","find","then","res","giphysrc","findGiphyById","id","findGiphyByIdController","findById","findRandGiphy","findRandGiphyController","random","giphyService","$http","giphyConfig","returnUrl","query","constructor","Array","join","get","url","data","images","original","replace","image_url","baseUrl","key","templateCache","$templateCache","put","value","$get","angular","module","directive","factory","provider","config","run","$inject"],"mappings":"CAAA,WACA,YAiBA,SAAAA,GAAAC,GACAA,EAAAC,OAAA,iBAMA,QAAAC,KACA,OACAC,OACAC,EAAA,YACAC,OAAA,KAEAC,WAAAC,EACAC,aAAA,KACAC,kBAAA,EACAC,YAAA,oBAMA,QAAAH,GAAAI,GAEA,GAAAC,GAAAC,IAEAF,GAAAG,KAAAF,EAAAR,GAAA,GAAAW,KAAA,SAAAC,GACAJ,EAAAK,SAAAD,IAQA,QAAAE,KACA,OACAf,OACAgB,GAAA,WACAd,OAAA,KAEAC,WAAAc,EACAZ,aAAA,KACAC,kBAAA,EACAC,YAAA,oBAMA,QAAAU,GAAAT,GAEA,GAAAC,GAAAC,IAEAF,GAAAU,SAAAT,EAAAO,IAAA,GAAAJ,KAAA,SAAAC,GACAJ,EAAAK,SAAAD,IAOA,QAAAM,KACA,OACAnB,OACAC,EAAA,YACAC,OAAA,KAEAC,WAAAiB,EACAf,aAAA,KACAC,kBAAA,EACAC,YAAA,oBAMA,QAAAa,GAAAZ,GAEA,GAAAC,GAAAC,IAEAF,GAAAa,OAAAZ,EAAAR,GAAA,GAAAW,KAAA,SAAAC,GACAJ,EAAAK,SAAAD,IAOA,QAAAS,GAAAC,EAAAC,GAwBA,QAAAb,GAAAV,EAAAwB,GACA,GAAAC,GAAAzB,EAAA0B,cAAAC,MAAA3B,EAAA4B,KAAA,KAAA5B,CACA,OAAAsB,GAAAO,IAAAC,EAAApB,KAAA,MAAAe,GAAAd,KAAA,SAAAC,GACA,MAAAY,GAAAZ,EAAAmB,KAAAA,KAAA,GAAAC,OAAAC,SAAAH,IAAAlB,EAAAmB,KAAAA,KAAA,KAWA,QAAAd,GAAAF,EAAAS,GACA,MAAAF,GAAAO,IAAAC,EAAAb,SAAAiB,QAAA,KAAAnB,IAAAJ,KAAA,SAAAC,GACA,MAAAY,GAAAZ,EAAAmB,KAAAA,KAAAC,OAAAC,SAAAH,IAAAlB,EAAAmB,KAAAA,OAWA,QAAAX,GAAApB,EAAAwB,GACA,GAAAC,GAAAzB,EAAA0B,cAAAC,MAAA3B,EAAA4B,KAAA,KAAA5B,CACA,OAAAsB,GAAAO,IAAAC,EAAAV,OAAA,QAAAK,GAAAd,KAAA,SAAAC,GACA,MAAAY,GAAAZ,EAAAmB,KAAAA,KAAAI,UAAAvB,EAAAmB,KAAAA,OApDA,GAAAK,GAAA,+BAEAN,GACAV,OAAAgB,EAAA,mBAAAb,EAAAc,IACA3B,KAAA0B,EAAA,mBAAAb,EAAAc,IACApB,SAAAmB,EAAA,eAAAb,EAAAc,IAIA,QACA3B,KAAAA,EACAO,SAAAA,EACAG,OAAAA,GAgDA,QAAAkB,GAAAC,GACAA,EAAAC,IAAA,mBAAA,oCAIA,QAAAjB,KAEAd,KAAAZ,OAAA,SAAA4C,GACAhC,KAAA4B,IAAAI,GAGAhC,KAAAiC,KAAA,WACA,MAAAjC,OAlLAkC,QAAAC,OAAA,eAEAC,UAAA,YAAA/C,GACA+C,UAAA,UAAA/B,GACA+B,UAAA,YAAA3B,GAEA4B,QAAA,QAAAzB,GACA0B,SAAA,cAAAxB,GAEAyB,OAAArD,GACAsD,IAAAX,GAGA3C,EAAAuD,SAAA,uBAsBA/C,EAAA+C,SAAA,SA4BAlC,EAAAkC,SAAA,SA2BA/B,EAAA+B,SAAA,SAYA7B,EAAA6B,SAAA,QAAA,eA8DAZ,EAAAY,SAAA","file":"ng-giphy.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('ng-giphy', [])\n\n    .directive('giphyFind',  findGiphy)\n    .directive('giphyId',    findGiphyById)\n    .directive('giphyRand',  findRandGiphy)\n\n    .factory('giphy',        giphyService)\n    .provider('giphyConfig', giphyConfig)\n\n    .config(ngGiphyConfig)\n    .run(templateCache);\n\n  // configure the provider to use the beta key\n  ngGiphyConfig.$inject = ['giphyConfigProvider'];\n  /* @ngInject */\n  function ngGiphyConfig(giphyConfigProvider) {\n    giphyConfigProvider.setKey('dc6zaTOxFJmzC');\n  }\n\n  /**\n   * Directive: find gif by tag\n   */\n  function findGiphy() {\n    return {\n      scope: {\n        q     : '=giphyTag',\n        rating: '='\n      },\n      controller: findGiphyController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findGiphyController.$inject = ['giphy'];\n  /* @ngInject */\n  function findGiphyController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.find(vm.q, true).then(function (res) {\n      vm.giphysrc = res;\n    });\n  }\n\n\n  /**\n   * Directive: find gif by id\n   */\n  function findGiphyById() {\n    return {\n      scope: {\n        id    : '=giphyId',\n        rating: '='\n      },\n      controller: findGiphyByIdController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findGiphyByIdController.$inject = ['giphy'];\n  /* @ngInject */\n  function findGiphyByIdController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.findById(vm.id, true).then(function (res) {\n      vm.giphysrc = res;\n    });\n  }\n\n  /**\n   * Directive: find random gif by tag\n   */\n  function findRandGiphy() {\n    return {\n      scope: {\n        q     : '=giphyTag',\n        rating: '='\n      },\n      controller: findRandGiphyController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findRandGiphyController.$inject = ['giphy'];\n  /* @ngInject */\n  function findRandGiphyController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.random(vm.q, true).then(function (res) {\n      vm.giphysrc = res;\n    });\n  }\n\n  // services to interact with Giphy API endpoints\n  giphyService.$inject = ['$http', 'giphyConfig'];\n  /* @ngInject */\n  function giphyService($http, giphyConfig) {\n\n    var baseUrl = 'http://api.giphy.com/v1/gifs';\n\n    var url = {\n      random   : baseUrl + '/random?api_key=' + giphyConfig.key,\n      find     : baseUrl + '/search?api_key=' + giphyConfig.key,\n      findById : baseUrl + '/%s?api_key='     + giphyConfig.key\n    };\n\n    // expose the service API\n    return {\n      find        : find,\n      findById    : findById,\n      random      : random,\n    };\n\n    /**\n     * Gets a gif url searching by tag\n     *\n     * @param {string} query\n     * @param {Boolean} returnUrl\n     * @return {string} gif url\n     */\n    function find(q, returnUrl){\n      var query = q.constructor === Array ? q.join('+') : q;\n      return $http.get(url.find + '&q=' + query).then(function (res) {\n        return returnUrl ? res.data.data[0].images.original.url : res.data.data[0];\n      });\n    }\n\n   /**\n    * Gets a gif url searching by id\n    *\n    * @param {string} gif id\n    * @param {Boolean} returnUrl\n    * @return {string} gif url\n    */\n    function findById(id, returnUrl){\n      return $http.get(url.findById.replace('%s', id)).then(function (res) {\n        return returnUrl ? res.data.data.images.original.url : res.data.data;\n      });\n    }\n\n    /**\n     * Gets a random gif url searching by tag\n     *\n     * @param {string} query\n     * @param {Boolean} returnUrl\n     * @return {string} gif url\n     */\n    function random(q, returnUrl){\n      var query = q.constructor === Array ? q.join('+') : q;\n      return $http.get(url.random + '&tag=' + query).then(function (res) {\n        return returnUrl ? res.data.data.image_url : res.data.data;\n      });\n    }\n  }\n\n\n  templateCache.$inject = ['$templateCache'];\n  /* @ngInject */\n  function templateCache($templateCache) {\n    $templateCache.put('imgTemplate.html', '<img ng-src=\"{{ vm.giphysrc }}\">');\n  }\n\n  // giphy API key provider\n  function giphyConfig() {\n    /* jshint validthis: true */\n    this.setKey = function(value) {\n      this.key = value;\n    };\n\n    this.$get = function() {\n      return this;\n    };\n  }\n\n})();\n"],"sourceRoot":"/source/"}